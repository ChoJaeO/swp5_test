: 기본적으로 환경변수는 대문자를 사용

vi의 세가지 모드
- 입력모드 <- esc, i -> 명령어 모드 <- , esc, enter -> ex모드
명령어 모드
 i, a를 누르면 입력모드로 변환
 ''를 입력면 ex모드로

입력모드
 <ESC>를 누르면 명령어 모드로

ex모드
 write, cancel, quit, help와 같은 기능을 이용할 수 있는 실행모드
 <ESC>나 <Enter>키를 누르면 명령어 보드로 전환

vi 설정
set nuber  line표시
set ai  auto indent
set si  smart indent
set cindent  c style indent
set tabstop=?  tab을 ?칸으로			*
set ignorecase  검색시 대소문자 구별하지 않음
set hlsearch  검색시 하이라이트(색상강조)
set expandtab  tab대신 띄어쓰기로		*
set nocompatible  방향키로 이동 가능
set fileencodings=utf-8,euc-kr파일인코딩 형식 지정
set histoy=1000  명령어 대한 히스토리를 1000개까지
set ruler  상태표시줄에 커서의 위치 표시
set nobackup  백업파일을 만들지 않음
set title  제목을 표시
set showmatch  매칭되는 괄호를 보여줌
set nowrap  자동 줄바꿈 하지 않음
set wmnu  tab 자동완성시 가능한 목록을 보여줌
syntax on  문법 하이라이트 기능

vi 검색
/<검색어>  위에서 아래
/<검색어>  아래에서 위로
n  그 다음 검색(검색 방향 유지)
N  그 다음 검색(역방향으로 검색)

vi 문자열 치환
[범위]/[매칭문자열]/[치환문자열]/[행범위]
[범위]
s  현재 행
%s  문서 전체
10, 20s  10번째~20번째
-3, +4s  현재 커서위치에서 3행 위 4행 아래

[행범위]
아무것도없음 : 현재행의 처음것을 교체
g : 모두다 교체
gc : 확인하며 교체

vi cheat sheet
???????

apt(advanced package tool) : 프로그램간의 의존성 문제 해결, 프로그램 설치, 삭제, 업그레이드 기능
apt list --install : 설치되어 있는 패키지들을 나열
apt list --install <패키지 이름> : 특정 패키지가 설치되어 있는지를 확인
apt install <패키지 이름> : 설치, sudo권한 필요

apt show <패키지 이름> : 정보 확인
apt depends <패키지 이름> : 의존성 확인
apt search <패키지 이름> : 패키지 찾기
apt update : 시스템 패키지 정보 업데이트 (sudo권한 필요), <패키지 이름>없음
apt upgrade : 업그레이드 (sudo권한 필요)
apt purge <패키지 이름> : 패키지 삭제, sudo권한 필요한 듯 싶음

데몬 프로세스 (Daemon Process)
사용자가 직접적으로 제어하지 않고, 백그라운드에서 돌면서 여러 작업을 하는 프로그램

소프트웨어 형상관리
(SCM : Software configuration Management)
: 형상 항목을 식별하여 그 기능적 물리적 특성을 문서화하고, 그러한 특성헤 대한 변경을 제어하고, 변경 처리 상태를 기록 및 보고하고, 명시된 요구사항에 부합하는지 확인하는 일련의 사항에 대해 기술적 행적적인 지침과 사후 관리를 적용하는 원칙
: 소프트웨어에 가해지는 변경을 제어하고 관리

형상관리의 필요성
1. 동일한 프로젝트에 대해서 여러 개발자가 동시에 개발 할 수 있어야 한다.
2. 이전 리비전이나 버전에 대한 정보를 언제든지 접근할 수 있어야 한다.
3. 에러가 발생했을 경우 빠른 시간 내에 처리할 수 있어야 한다.
4. 불필요한 사용자가 소스를 수정할 수 없도록 해야한다.
5. 사용자의 요구에 따라 적시에 최상의 소프트웨어를 공급할 수 있어야 한다.

버전관리
: 파일의 변화를 시간에 따라 기록하는 시스템 - 사용자가 과거 특정 시점의 버전을 다시 불러올 수 있음.
장점
: 생산성 향상, 소스 코드 백업 용도, Hassel-free experimentation(branch), Helps to identify/fix conflicts - decent tools

Repository = .git directory
Revision
Trunk
Branch : 
Tag
Merge


버전 관리 시스템의 유형
로컬 버전 관리
- 디렉토리로 파일을 시간 정보와 함께 복사하는 방법
- 작업하던 디렉토리를 지워버리거나, 실수로 파일을 잘못 고칠 수도 있고, 잘못 복사 가능성이 있음.

중앙집중식 버전 관리
파일을 관리하는 서버가 별도로 있고 클라이언트가 중앙 서버에서 파일을 받아서 사용



중앙 버전 관리 시스템 (Centralized Version Control Systems)
: 시스템은 파일을 관리하는 서버가 별도로 존재
: 클라이언트가 중앙 서버에서 파일을 받아서 사용
: 장점 	- 모두 누가 무엇을 하고 있는지 알 수 있다.
	- 관리자는 누가 무엇을 할지 꼼꼼하게 관리
: 단점	- 중앙 데이터베이스가 있는 디스크 문제 -> 프로젝트의 모든 히스토리를 잃음
	- 서버가 한시간동안 다운되면?

분산 버전 관리 시스템 (Distributed Version Control Systems)
: 클라이언트는 단순히 파일의 마지막 스냅샷을 Checkout 하지 않음
: 클라이언트는 저장소를 전부 복제
: 서버에 문제가 생기면 이 복제물로 다시 작업을 시작할 수 있음
: 동시에 다양한 그룹과 다양한 방법으로 협업
: ex) Git, Mercurial

Untracked : 관리 대상 아님

Remote Rep		Local Repo		Staging Area		Working Directory
	
git 명령어
git clone [url] : 저장소 복사
git add <파일이름>
git status : git 상태 확인
git init : git으로 관리 할수 있게 함.
git rm --cached <파일 이름> : 실수로 add했을 때 취소하는 것
git diff : 파일 변경사항 확인
git diff --cached : 파일 변경사항 확인
(두 개 차이 확인 10-2 29)
git commit -m "커밋 메시지"
git log : git history 조회
--oneline : commitID당 한줄로
--graph : graph형태로 조회
--stat : 요약 형태로
-p -1 : 패치 파일 형태로 출력
HEAD 현재 커밋을 가리키고 있는 포인터
git reset [option] <commitID> : HEAD포인터를 <commitID>가 가리키는 커밋으로 이동
--hard : 특정 버전의 커밋으로 이동 후, 워킹 디렉토리 내용도 변경
--soft : 특정 버전의 커밋으로 이동, 변경사항은 유지(안전)
<commitID>에 'HEAD~1'하면 하나 이전의 커밋으로
git pull : 원격 저장소 -> working directory
git fetch/merge : 원격 저장소 -> 지역 저장소, 지역 저장소 -> Working directory
git push <remote-name - ex)origin> <branch-name -ex) master>
git branch <branch-name> : 새로운 브랜치 생성
git checkout <branch-name> : 다른 브랜치로 이동
git branch -d <branch-name> : 그 브랜치 삭제

병합(Merge) 방식
1. Fast-Forward Merge : 새로운 커밋을 생성하지 않고, HEAD 포인터와 master 포인터를 이동
2. 3-Way Merge : 

